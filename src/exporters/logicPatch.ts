import { sanitizeFilename, sortChainPlugins, buildZipArchive, encodeUtf8 } from "./utils";
import type { PresetSerializer, PluginChain, PluginChainPlugin, SerializedPreset } from "./types";

function escapeXml(value: string): string {
  return value
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
}

function plist(strings: string[]): string {
  return `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
${strings.join("\n")}
</dict>
</plist>
`;
}

function plistString(key: string, value: string | null | undefined): string | null {
  if (!value) return null;
  return `<key>${key}</key><string>${escapeXml(value)}</string>`;
}

function serializePlugin(plugin: PluginChainPlugin, index: number): string {
  const identifier =
    plugin.identifiers?.logic ??
    plugin.identifiers?.au ??
    plugin.identifiers?.generic ??
    plugin.name;

  const paramEntries = Object.entries(plugin.settings).map(
    ([paramName, value]) => `<dict>
  <key>Name</key>
  <string>${escapeXml(paramName)}</string>
  <key>Value</key>
  <string>${escapeXml(String(value))}</string>
</dict>`
  );

  return `<dict>
  <key>Index</key>
  <integer>${index}</integer>
  <key>Name</key>
  <string>${escapeXml(plugin.name)}</string>
  <key>Identifier</key>
  <string>${escapeXml(identifier)}</string>
  <key>Type</key>
  <string>${escapeXml(plugin.type)}</string>
  <key>Bypassed</key>
  <${plugin.bypassed ? "true" : "false"}/>
  <key>Parameters</key>
  <array>
    ${paramEntries.join("\n")}
  </array>
  ${
    plugin.comment
      ? `<key>Comment</key>
  <string>${escapeXml(plugin.comment)}</string>`
      : ""
  }
</dict>`;
}

async function buildPatch(chain: PluginChain): Promise<Buffer> {
  const plugins = sortChainPlugins(chain).map(serializePlugin);

  const infoEntries = [
    plistString("name", chain.song?.title ?? chain.summary ?? "ToneTerminal Chain"),
    plistString("creator", "ToneTerminal"),
    plistString("daw", chain.daw),
    plistString("clipWindow", chain.clipWindow ?? null),
  ].filter(Boolean) as string[];

  const infoPlist = plist(infoEntries);

  const pluginPlist = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
${plugins.join("\n")}
</array>
</plist>
`;

  return buildZipArchive(
    [
      { path: "Contents/Info.plist", data: encodeUtf8(infoPlist) },
      { path: "Contents/PlugInData.plist", data: encodeUtf8(pluginPlist) },
      { path: "Contents/README.txt", data: encodeUtf8("Generated by ToneTerminal. Place this .patch inside ~/Music/Audio Music Apps/Channel Strip Settings/ for Logic Pro to load it.") },
    ],
    { compression: "DEFLATE" }
  );
}

const LogicPatchSerializer: PresetSerializer = {
  id: "logic-patch",
  label: "Logic Channel Strip Patch",
  canHandle(daw: string) {
    return daw === "logic_pro" || daw === "logic";
  },
  async serialize(chain: PluginChain): Promise<SerializedPreset> {
    const archive = await buildPatch(chain);
    const safeBase =
      chain.song?.title ?? chain.summary ?? `${chain.daw.replace(/\s+/g, "_")}_channel`;
    const filename = `${sanitizeFilename(safeBase)}.patch`;
    return {
      filename,
      mime: "application/zip",
      data: archive,
      serializerId: LogicPatchSerializer.id,
      label: LogicPatchSerializer.label,
      isNative: true,
    };
  },
};

export default LogicPatchSerializer;
