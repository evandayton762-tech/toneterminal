import { PresetSerializer, PluginChain, SerializedPreset } from "./types";

function escapeXml(value: string): string {
  return value
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
}

const ReaperRfxSerializer: PresetSerializer = {
  id: "reaper-rfx",
  label: "Reaper RFX Chain",
  canHandle(daw: string) {
    return daw.toLowerCase() === "reaper";
  },
  async serialize(chain: PluginChain): Promise<SerializedPreset> {
    const header = `<?xml version="1.0" encoding="UTF-8"?>\n<FXCHAIN>\n`;
    const footer = `</FXCHAIN>\n`;

    const commentBlock = chain.summary
      ? `  <COMMENT>\n    <TEXT>${escapeXml(chain.summary)}</TEXT>\n  </COMMENT>\n`
      : "";

    const songBlock = chain.song
      ? `  <COMMENT>\n    <TEXT>${escapeXml(
        `Reference: ${chain.song.title ?? "Unknown"} - ${
          chain.song.artist ?? "Unknown"
        }${chain.song.timecode ? ` (${chain.song.timecode})` : ""}`
      )}</TEXT>\n  </COMMENT>\n`
      : "";

    const clipBlock = chain.clipWindow
      ? `  <COMMENT>\n    <TEXT>${escapeXml(
        `Clip window analyzed: ${chain.clipWindow}`
      )}</TEXT>\n  </COMMENT>\n`
      : "";

    const pluginBlocks = chain.plugins
      .map((plugin) => {
        const name = escapeXml(plugin.name);
        const type = escapeXml(plugin.type);
        const settings = Object.keys(plugin.settings).length
          ? Object.entries(plugin.settings)
              .map(([key, value]) => `      <PRESET_PARAM name="${escapeXml(key)}" value="${escapeXml(value)}"/>`)
              .join("\n")
          : "";
        const comment = plugin.comment
          ? `      <TEXT>${escapeXml(plugin.comment)}</TEXT>`
          : "";
        return `  <FX id="${name}">\n    <NAME>${name}</NAME>\n    <TYPE>${type}</TYPE>\n    <STATE chunkid="0">\n      <PRESET>\n${settings}${settings ? "\n" : ""}      <TEXT>${name} preset generated by ToneTerminal</TEXT>\n${comment ? `${comment}\n` : ""}      </PRESET>\n    </STATE>\n  </FX>\n`;
      })
      .join("");

    const xml = `${header}${commentBlock}${songBlock}${clipBlock}${pluginBlocks}${footer}`;

    return {
      filename: `${chain.daw.replace(/\s+/g, "_")}_chain.rfxchain`,
      mime: "application/xml",
      data: Buffer.from(xml, "utf-8"),
      serializerId: ReaperRfxSerializer.id,
      label: ReaperRfxSerializer.label,
      isNative: true,
    };
  },
};

export default ReaperRfxSerializer;
